import { compareAddress, ERC20Interface, getChainName, getExplorerAddressLink, useContractCall, useEthers} from '@usedapp/core'
import React , { useState, useEffect } from 'react'
import { Colors, BorderRad, Transitions } from '../global/styles'
import { LinkPreview } from '@dhaiwat10/react-link-preview';
import { Fonts } from '../global/styles'
import { Button } from '../components/base/Button'

import ReactJson from 'react-json-view'
import { Container, ContentBlock, ContentRow, MainContent, Section, SectionRow } from '../components/base/base'
import { Label } from '../typography/Label'
import { TextBold } from '../typography/Text'
import { TextInline } from '../typography/Text'
import { Title } from '../typography/Title'
import Avatar from 'react-avatar';
import { Icon } from '@rsuite/icons';
import { Falsy } from '@usedapp/core/dist/esm/src/model/types'
import { formatUnits } from '@ethersproject/units'
import { utils } from 'ethers'
import { AccountButton } from '../components/account/AccountButton'
import { Constants } from '../Constants'

import ERC20ABI from '../abi/ERC721.json'
import TweetEmbed from 'react-tweet-embed'
import styled, { createGlobalStyle } from 'styled-components'
import { Link } from '../components/base/Link'



const AboutSvg = React.forwardRef((props, ref) => (
  <svg width="200" height="250" viewBox="0 0 728 136" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect x="2" y="2" width="724" height="132" rx="30" fill="#8247E5" stroke="#601FCD" stroke-width="4"/>
  <path d="M407.614 54.3848C406.157 53.4968 404.262 53.4968 402.659 54.3848L391.29 61.1923L383.564 65.632L372.196 72.4397C370.738 73.3276 368.843 73.3276 367.24 72.4397L358.203 67.1121C356.745 66.2242 355.725 64.5962 355.725 62.8202V52.3129C355.725 50.537 356.6 48.9091 358.203 48.0211L367.094 42.8414C368.552 41.9535 370.447 41.9535 372.05 42.8414L380.941 48.0211C382.399 48.9091 383.419 50.537 383.419 52.3129V59.1205L391.144 54.5327V47.7251C391.144 45.9492 390.269 44.3214 388.666 43.4334L372.196 33.666C370.738 32.778 368.843 32.778 367.24 33.666L350.478 43.4334C348.875 44.3214 348 45.9492 348 47.7251V67.408C348 69.1838 348.875 70.8118 350.478 71.6997L367.24 81.4671C368.697 82.3552 370.592 82.3552 372.196 81.4671L383.564 74.8075L391.29 70.2198L402.659 63.5602C404.116 62.6723 406.011 62.6723 407.614 63.5602L416.506 68.74C417.963 69.6279 418.983 71.2558 418.983 73.0317V83.5391C418.983 85.3149 418.109 86.9428 416.506 87.8307L407.614 93.1586C406.157 94.0465 404.262 94.0465 402.659 93.1586L393.768 87.9788C392.31 87.0909 391.29 85.463 391.29 83.687V76.8795L383.564 81.4671V88.2748C383.564 90.0506 384.439 91.6785 386.042 92.5665L402.804 102.334C404.262 103.222 406.157 103.222 407.76 102.334L424.522 92.5665C425.98 91.6785 427 90.0506 427 88.2748V68.5919C427 66.8161 426.126 65.1882 424.522 64.3003L407.614 54.3848Z" fill="white"/>
  <path d="M457.177 97V80.655C458.959 82.8869 462.194 84.1341 465.957 84.1341C475.53 84.1341 482 77.3729 482 67.0671C482 56.7612 476.058 50 466.75 50C462.458 50 459.157 51.5754 457.177 54.1355V50.5251H448V97H457.177ZM464.835 76.257C459.883 76.257 456.649 72.581 456.649 67.0671C456.649 61.4874 459.883 57.8115 464.835 57.8115C469.654 57.8115 472.955 61.4874 472.955 67.0671C472.955 72.581 469.654 76.257 464.835 76.257Z" fill="white"/>
  <path d="M502.5 84C512.697 84 520 76.8077 520 67C520 57.1923 512.697 50 502.5 50C492.303 50 485 57.1923 485 67C485 76.8077 492.303 84 502.5 84ZM502.5 76.1539C497.566 76.1539 494.211 72.4269 494.211 67C494.211 61.5077 497.566 57.7808 502.5 57.7808C507.434 57.7808 510.789 61.5077 510.789 67C510.789 72.4269 507.434 76.1539 502.5 76.1539Z" fill="white"/>
  <path d="M535 83V36H526V83H535Z" fill="white"/>
  <path d="M561.775 50L555.001 71.5749L548.162 50H539L550.807 83.1921L546.032 97H554.613L559.194 83.3249L571 50H561.775Z" fill="white"/>
  <path d="M596.757 53.8073C594.909 51.5098 591.608 50 587.581 50C577.876 50 572 56.7612 572 67.0671C572 77.3729 577.876 84.1341 587.713 84.1341C591.608 84.1341 595.107 82.6899 596.823 80.2612V84.5936C596.823 87.6788 594.777 89.845 592.004 89.845H576.687V97H593.456C600.983 97 606 92.4707 606 85.5782V50.5251H596.757V53.8073ZM589.165 76.257C584.28 76.257 581.045 72.6467 581.045 67.0671C581.045 61.4874 584.28 57.8115 589.165 57.8115C594.116 57.8115 597.351 61.4874 597.351 67.0671C597.351 72.6467 594.116 76.257 589.165 76.257Z" fill="white"/>
  <path d="M629.5 84C639.697 84 647 76.8077 647 67C647 57.1923 639.697 50 629.5 50C619.303 50 612 57.1923 612 67C612 76.8077 619.303 84 629.5 84ZM629.5 76.1539C624.566 76.1539 621.211 72.4269 621.211 67C621.211 61.5077 624.566 57.7808 629.5 57.7808C634.434 57.7808 637.789 61.5077 637.789 67C637.789 72.4269 634.434 76.1539 629.5 76.1539Z" fill="white"/>
  <path d="M660.314 83V65.2109C660.314 61.0215 663.175 57.9922 667.233 57.9922C671.091 57.9922 673.686 60.8281 673.686 64.7598V83H683V62.7617C683 55.2852 678.077 50 670.493 50C665.902 50 662.177 51.8691 660.314 55.0273V50.5156H651V83H660.314Z" fill="white"/>
  <path d="M46.8 83V54.2H58.7C58.98 54.2 59.34 54.2133 59.78 54.24C60.22 54.2533 60.6267 54.2933 61 54.36C62.6667 54.6133 64.04 55.1667 65.12 56.02C66.2133 56.8733 67.02 57.9533 67.54 59.26C68.0733 60.5533 68.34 61.9933 68.34 63.58C68.34 65.1533 68.0733 66.5933 67.54 67.9C67.0067 69.1933 66.1933 70.2667 65.1 71.12C64.02 71.9733 62.6533 72.5267 61 72.78C60.6267 72.8333 60.2133 72.8733 59.76 72.9C59.32 72.9267 58.9667 72.94 58.7 72.94H51.62V83H46.8ZM51.62 68.44H58.5C58.7667 68.44 59.0667 68.4267 59.4 68.4C59.7333 68.3733 60.04 68.32 60.32 68.24C61.12 68.04 61.7467 67.6867 62.2 67.18C62.6667 66.6733 62.9933 66.1 63.18 65.46C63.38 64.82 63.48 64.1933 63.48 63.58C63.48 62.9667 63.38 62.34 63.18 61.7C62.9933 61.0467 62.6667 60.4667 62.2 59.96C61.7467 59.4533 61.12 59.1 60.32 58.9C60.04 58.82 59.7333 58.7733 59.4 58.76C59.0667 58.7333 58.7667 58.72 58.5 58.72H51.62V68.44ZM86.5269 83.6C83.6469 83.6 81.1802 82.9733 79.1269 81.72C77.0735 80.4533 75.4935 78.6933 74.3869 76.44C73.2935 74.1867 72.7469 71.5733 72.7469 68.6C72.7469 65.6267 73.2935 63.0133 74.3869 60.76C75.4935 58.5067 77.0735 56.7533 79.1269 55.5C81.1802 54.2333 83.6469 53.6 86.5269 53.6C89.4069 53.6 91.8735 54.2333 93.9269 55.5C95.9935 56.7533 97.5735 58.5067 98.6669 60.76C99.7735 63.0133 100.327 65.6267 100.327 68.6C100.327 71.5733 99.7735 74.1867 98.6669 76.44C97.5735 78.6933 95.9935 80.4533 93.9269 81.72C91.8735 82.9733 89.4069 83.6 86.5269 83.6ZM86.5269 79.06C88.4602 79.0733 90.0669 78.6467 91.3469 77.78C92.6402 76.9133 93.6069 75.6933 94.2469 74.12C94.9002 72.5467 95.2269 70.7067 95.2269 68.6C95.2269 66.4933 94.9002 64.6667 94.2469 63.12C93.6069 61.56 92.6402 60.3467 91.3469 59.48C90.0669 58.6133 88.4602 58.1667 86.5269 58.14C84.5935 58.1267 82.9869 58.5533 81.7069 59.42C80.4269 60.2867 79.4602 61.5067 78.8069 63.08C78.1669 64.6533 77.8469 66.4933 77.8469 68.6C77.8469 70.7067 78.1669 72.54 78.8069 74.1C79.4469 75.6467 80.4069 76.8533 81.6869 77.72C82.9802 78.5867 84.5935 79.0333 86.5269 79.06ZM111.177 83L102.757 54.2H107.817L113.557 75L119.277 54.24L124.337 54.2L130.077 75L135.797 54.2H140.857L132.457 83H127.697L121.797 62.52L115.937 83H111.177ZM146.12 83V54.2H164.72V58.72H150.94V65.82H162.32V70.34H150.94V78.48H164.72V83H146.12ZM171.519 83V54.2H183.419C183.699 54.2 184.059 54.2133 184.499 54.24C184.939 54.2533 185.345 54.2933 185.719 54.36C187.385 54.6133 188.759 55.1667 189.839 56.02C190.932 56.8733 191.739 57.9533 192.259 59.26C192.792 60.5533 193.059 61.9933 193.059 63.58C193.059 65.9267 192.465 67.9467 191.279 69.64C190.092 71.32 188.272 72.36 185.819 72.76L183.759 72.94H176.339V83H171.519ZM188.059 83L182.379 71.28L187.279 70.2L193.519 83H188.059ZM176.339 68.44H183.219C183.485 68.44 183.785 68.4267 184.119 68.4C184.452 68.3733 184.759 68.32 185.039 68.24C185.839 68.04 186.465 67.6867 186.919 67.18C187.385 66.6733 187.712 66.1 187.899 65.46C188.099 64.82 188.199 64.1933 188.199 63.58C188.199 62.9667 188.099 62.34 187.899 61.7C187.712 61.0467 187.385 60.4667 186.919 59.96C186.465 59.4533 185.839 59.1 185.039 58.9C184.759 58.82 184.452 58.7733 184.119 58.76C183.785 58.7333 183.485 58.72 183.219 58.72H176.339V68.44ZM199.925 83V54.2H218.525V58.72H204.745V65.82H216.125V70.34H204.745V78.48H218.525V83H199.925ZM225.323 83V54.2H234.503C234.743 54.2 235.217 54.2067 235.923 54.22C236.643 54.2333 237.337 54.28 238.003 54.36C240.283 54.6533 242.21 55.4667 243.783 56.8C245.37 58.12 246.57 59.8067 247.383 61.86C248.197 63.9133 248.603 66.16 248.603 68.6C248.603 71.04 248.197 73.2867 247.383 75.34C246.57 77.3933 245.37 79.0867 243.783 80.42C242.21 81.74 240.283 82.5467 238.003 82.84C237.35 82.92 236.663 82.9667 235.943 82.98C235.223 82.9933 234.743 83 234.503 83H225.323ZM230.223 78.46H234.503C234.903 78.46 235.41 78.4467 236.023 78.42C236.65 78.3933 237.203 78.3333 237.683 78.24C239.043 77.9867 240.15 77.38 241.003 76.42C241.857 75.46 242.483 74.2933 242.883 72.92C243.297 71.5467 243.503 70.1067 243.503 68.6C243.503 67.04 243.297 65.5733 242.883 64.2C242.47 62.8267 241.83 61.6733 240.963 60.74C240.11 59.8067 239.017 59.2133 237.683 58.96C237.203 58.8533 236.65 58.7933 236.023 58.78C235.41 58.7533 234.903 58.74 234.503 58.74H230.223V78.46ZM265.339 83V54.2H276.759C278.706 54.2 280.299 54.5933 281.539 55.38C282.792 56.1533 283.719 57.1467 284.319 58.36C284.932 59.5733 285.239 60.8267 285.239 62.12C285.239 63.7067 284.859 65.0533 284.099 66.16C283.352 67.2667 282.332 68.0133 281.039 68.4V67.4C282.852 67.8133 284.226 68.6733 285.159 69.98C286.106 71.2867 286.579 72.7733 286.579 74.44C286.579 76.1467 286.252 77.64 285.599 78.92C284.946 80.2 283.972 81.2 282.679 81.92C281.399 82.64 279.812 83 277.919 83H265.339ZM270.219 78.46H277.319C278.159 78.46 278.912 78.2933 279.579 77.96C280.246 77.6133 280.766 77.1333 281.139 76.52C281.526 75.8933 281.719 75.1533 281.719 74.3C281.719 73.5267 281.552 72.8333 281.219 72.22C280.886 71.6067 280.399 71.12 279.759 70.76C279.119 70.3867 278.352 70.2 277.459 70.2H270.219V78.46ZM270.219 65.7H276.699C277.392 65.7 278.012 65.5667 278.559 65.3C279.106 65.0333 279.539 64.64 279.859 64.12C280.179 63.6 280.339 62.96 280.339 62.2C280.339 61.2 280.019 60.3667 279.379 59.7C278.739 59.0333 277.846 58.7 276.699 58.7H270.219V65.7ZM298.363 83V71.2L288.562 54.2H294.183L300.803 65.68L307.403 54.2H313.023L303.243 71.2V83H298.363Z" fill="white"/>
  </svg>
));
const PolygonSvg = React.forwardRef((props, ref) => (
<svg width="100" height="20" viewBox="0 0 1024 213" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_301_18)">
<path d="M180.637 65.0708C176.22 62.3689 170.479 62.3689 165.62 65.0708L131.171 85.7851L107.763 99.2946L73.3144 120.01C68.8979 122.711 63.1566 122.711 58.2984 120.01L30.9158 103.798C26.4993 101.096 23.4077 96.1429 23.4077 90.7387V58.7664C23.4077 53.3626 26.0576 48.4091 30.9158 45.7072L57.8567 29.9461C62.2732 27.2442 68.0149 27.2442 72.8729 29.9461L99.8141 45.7072C104.231 48.4091 107.322 53.3626 107.322 58.7664V79.4809L130.73 65.5211V44.8065C130.73 39.4027 128.08 34.4493 123.222 31.7474L73.3144 2.02643C68.8979 -0.675476 63.1566 -0.675476 58.2984 2.02643L7.50811 31.7474C2.64993 34.4493 0 39.4027 0 44.8065V104.699C0 110.102 2.64993 115.056 7.50811 117.758L58.2984 147.479C62.715 150.181 68.4564 150.181 73.3144 147.479L107.763 127.214L131.171 113.255L165.62 92.9905C170.037 90.2887 175.778 90.2887 180.637 92.9905L207.577 108.752C211.994 111.454 215.086 116.407 215.086 121.811V153.783C215.086 159.187 212.435 164.14 207.577 166.842L180.637 183.054C176.22 185.756 170.479 185.756 165.62 183.054L138.68 167.293C134.263 164.591 131.171 159.638 131.171 154.233V133.519L107.763 147.479V168.193C107.763 173.597 110.414 178.551 115.272 181.252L166.062 210.974C170.479 213.676 176.22 213.676 181.078 210.974L231.868 181.252C236.285 178.551 239.377 173.597 239.377 168.193V108.301C239.377 102.898 236.727 97.9441 231.868 95.2423L180.637 65.0708Z" fill="#7950DD"/>
<path d="M332.637 193.821V144.098C338.023 150.888 347.797 154.682 359.168 154.682C388.093 154.682 407.642 134.114 407.642 102.763C407.642 71.4122 389.688 50.8444 361.562 50.8444C348.595 50.8444 338.621 55.6369 332.637 63.4247V52.4419H304.909V193.821H332.637ZM355.777 130.719C340.816 130.719 331.041 119.537 331.041 102.763C331.041 85.7897 340.816 74.6072 355.777 74.6072C370.339 74.6072 380.313 85.7897 380.313 102.763C380.313 119.537 370.339 130.719 355.777 130.719Z" fill="black"/>
<path d="M470.604 154.682C501.524 154.682 523.666 132.716 523.666 102.763C523.666 72.8101 501.524 50.8444 470.604 50.8444C439.685 50.8444 417.542 72.8101 417.542 102.763C417.542 132.716 439.685 154.682 470.604 154.682ZM470.604 130.719C455.643 130.719 445.47 119.337 445.47 102.763C445.47 85.9894 455.643 74.6072 470.604 74.6072C485.565 74.6072 495.739 85.9894 495.739 102.763C495.739 119.337 485.565 130.719 470.604 130.719Z" fill="black"/>
<path d="M568.156 153.084V8.71033H540.429V153.084H568.156Z" fill="black"/>
<path d="M651.506 52.4419L630.561 117.34L609.416 52.4419H581.09L617.595 152.286L602.833 193.821H629.364L643.527 152.685L680.029 52.4419H651.506Z" fill="black"/>
<path d="M757.906 62.4262C752.321 55.4372 742.347 50.8444 730.178 50.8444C700.855 50.8444 683.101 71.4122 683.101 102.763C683.101 134.114 700.855 154.682 730.577 154.682C742.347 154.682 752.919 150.289 758.106 142.9V156.08C758.106 165.465 751.922 172.055 743.544 172.055H697.264V193.821H747.932C770.673 193.821 785.833 180.042 785.833 159.075V52.4419H757.906V62.4262ZM734.966 130.719C720.204 130.719 710.43 119.737 710.43 102.763C710.43 85.7897 720.204 74.6072 734.966 74.6072C749.927 74.6072 759.702 85.7897 759.702 102.763C759.702 119.737 749.927 130.719 734.966 130.719Z" fill="black"/>
<path d="M855.732 154.682C886.651 154.682 908.794 132.716 908.794 102.763C908.794 72.8101 886.651 50.8444 855.732 50.8444C824.812 50.8444 802.67 72.8101 802.67 102.763C802.67 132.716 824.812 154.682 855.732 154.682ZM855.732 130.719C840.771 130.719 830.597 119.337 830.597 102.763C830.597 85.9894 840.771 74.6072 855.732 74.6072C870.693 74.6072 880.866 85.9894 880.866 102.763C880.866 119.337 870.693 130.719 855.732 130.719Z" fill="black"/>
<path d="M951.888 153.084V97.9707C951.888 84.991 960.465 75.6057 972.634 75.6057C984.204 75.6057 991.983 84.3919 991.983 96.5729V153.084H1019.91V90.3826C1019.91 67.2188 1005.15 50.8444 982.408 50.8444C968.644 50.8444 957.473 56.6353 951.888 66.42V52.4419H923.96V153.084H951.888Z" fill="black"/>
</g>
<defs>
<clipPath id="clip0_301_18">
<rect width="1024" height="213" fill="white"/>
</clipPath>
</defs>
</svg>

));

export function Search() {
  const NFT_ADDRESS = Constants.NFT_ADDRESS;
  const { account,chainId } = useEthers()
  const myInterface = new utils.Interface(ERC20ABI)
  const [disabled, setDisabled] = useState(false)
  function useMyNFTBalance(
    tokenAddress: string | Falsy,
    address: string | Falsy
  ) {
    const [tokenBalance] =
      useContractCall(
        address &&
          tokenAddress && {
            abi: myInterface, // ABI interface of the called contract
            address: tokenAddress, // On-chain address of the deployed contract
            method: "balanceOf", // Method to be called
            args: [address], // Method arguments - address to be checked for balance
          }
      ) ?? [];
    return tokenBalance;
  }
 
  
  function useOwnerBalance(
    tokenAddress: string | Falsy,
    tokenID: string | Falsy
  ) {
    const [tokenData] =
      useContractCall(
        tokenID &&
          tokenAddress && {
            abi: myInterface, // ABI interface of the called contract
            address: tokenAddress, // On-chain address of the deployed contract
            method: "ownerOf", // Method to be called
            args: [tokenID], // Method arguments - address to be checked for balance
          }
      ) ?? [];
    return tokenData;
  }


  function useURI(
    tokenAddress: string | Falsy,
    tokenID: string | Falsy
  ) {
    const [tokenData] =
      useContractCall(
        tokenID &&
          tokenAddress && {
            abi: myInterface, // ABI interface of the called contract
            address: tokenAddress, // On-chain address of the deployed contract
            method: "tokenURI", // Method to be called
            args: [tokenID], // Method arguments - address to be checked for balance
          }
      ) ?? [];
    return tokenData;
  }
  //1485616420402888706
  const [amount, setAmount] = useState('0')

  const tokenBalance = useMyNFTBalance(NFT_ADDRESS, account)
  const ownerBalance = useOwnerBalance(NFT_ADDRESS,amount)
  const uri = useURI(NFT_ADDRESS, amount)
  
  return (
    <MainContent>
      
      <Container>
     
        <Section>
          <SectionRow>
          <Title><Avatar round="20px" style={{opacity: 0.8}} src='https://i.imgur.com/cOQzFs0.png' /> Search  TokenId (@twitter)         {chainId == 80001  &&  <Icon as={PolygonSvg} /> } </Title> 
          <AccountButton />
          
           </SectionRow>
     
          <TextBold>You are conected to ChainID:<TextBold>{chainId}</TextBold> </TextBold>
         
          <InputRow> 
          
           <Input
          id={`EthInput`}
          type="number"
          step="0.01"
          value={amount}
          onChange={(e) => setAmount(e.currentTarget.value)}
          placeholder='Search  tokenID of NFT'
          min="0"
          disabled={disabled}
        /></InputRow>
       
           <SectionRow>
             {ownerBalance &&
           <Label>  The owner of the tweet {amount} is: <TextInline>{ownerBalance}</TextInline> </Label>
             }
              {!ownerBalance &&
           <Label>  There is no owner of tweet {amount}  </Label>
             }
            {tokenBalance && (
             
            <BalanceWrapper> <TextBold>You own: </TextBold>{formatUnits(tokenBalance, 0)} <Avatar round="10px" size= "40px" src='https://i.imgur.com/8gAClAR.png' /> </BalanceWrapper>
            )}
         
          </SectionRow>
           <TweetEmbed id={amount}  options={{ cards: 'hidden' ,align:'center',  width:'350' ,lang:'eng', dnt: 'true' }} />
            <ContentBlock> 
             {amount && uri && 
            <Label>  The URI of the tweet is:  <LinkPreview url={uri} height='80px' width='80px' /> <LinkWrapper>{uri}</LinkWrapper></Label>
  } 
            </ContentBlock> 
          
          <Icon as={AboutSvg} />
          
        </Section> 
      </Container>
    </MainContent>
  )
}

const InputRow = styled.div`
  height: 44px;
  display: flex;
  margin: 0 auto;
  color: ${Colors.Gray['600']};
  align-items: center;
  border: ${Colors.Gray['300']} 1px solid;
  border-radius: ${BorderRad.m};
  overflow: hidden;
  transition: ${Transitions.all};

  &:hover,
  &:focus-within {
    border-color: ${Colors.Black[900]};
  }
`
const Input = styled.input`
  height: 100%;
  width: 300px;
  padding: 0 0 0 24px;
  border: 0;
  border-radius: ${BorderRad.m};
  -moz-appearance: textfield;
  outline: none;
  font-family: ${Fonts.Helvetica};
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  &:-webkit-autofill,
  &:-webkit-autofill:hover,
  &:-webkit-autofill:focus,
  &:-webkit-autofill:active {
    -webkit-background-clip: text;
  }
`
const SmallButton = styled(Button)`
display: flex;
justify-content: center;
min-width: 95px;
height: 100%;
padding: 8px 24px;

&:disabled {
  color: ${Colors.Gray['600']};
  cursor: unset;
}

&:disabled:hover,
&:disabled:focus {
  background-color: unset;
  color: unset;
}
`
const BalanceWrapper = styled.div`
  color: ${Colors.Gray['600']};
  font-size: 20px;
  margin: 2px 0 4px 0;
  font-weight: 700;
  align-self: flex-end;
`
const LinkWrapper = styled.div`
  color: ${Colors.Gray['600']};
  font-size: 12px;
  margin: 2px 0 4px 0;
  align-self: flex-left;
`
